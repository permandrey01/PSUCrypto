using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kuznechik
{
    class Program
    {
        static byte blockSize = 16;


        static byte[] CoefficientsL = {
        1, 148, 32, 133, 16, 194, 192, 1,
        251, 1, 192, 194, 16, 133, 32, 148
    };

        static byte[] SBox = {
        0xfc, 0xee, 0xdd, 0x11, 0xcf, 0x6e, 0x31, 0x16,
        0xfb, 0xc4, 0xfa, 0xda, 0x23, 0xc5, 0x4, 0x4d,
        0xe9, 0x77, 0xf0, 0xdb, 0x93, 0x2e, 0x99, 0xba,
        0x17, 0x36, 0xf1, 0xbb, 0x14, 0xcd, 0x5f, 0xc1,
        0xf9, 0x18, 0x65, 0x5a, 0xe2, 0x5c, 0xef, 0x21,
        0x81, 0x1c, 0x3c, 0x42, 0x8b, 0x01, 0x8e, 0x4f,
        0x05, 0x84, 0x02, 0xae, 0xe3, 0x6a, 0x8f, 0xa0,
        0x06, 0x0b, 0xed, 0x98, 0x7f, 0xd4, 0xd3, 0x1f,
        0xeb, 0x34, 0x2c, 0x51, 0xea, 0xc8, 0x48, 0xab,
        0xf2, 0x2a, 0x68, 0xa2, 0xfd, 0x3a, 0xce, 0xcc,
        0xb5, 0x70, 0x0e, 0x56, 0x08, 0x0c, 0x76, 0x12,
        0xbf, 0x72, 0x13, 0x47, 0x9c, 0xb7, 0x5d, 0x87,
        0x15, 0xa1, 0x96, 0x29, 0x10, 0x7b, 0x9a, 0xc7,
        0xf3, 0x91, 0x78, 0x6f, 0x9d, 0x9e, 0xb2, 0xb1,
        0x32, 0x75, 0x19, 0x3d, 0xff, 0x35, 0x8a, 0x7e,
        0x6d, 0x54, 0xc6, 0x80, 0xc3, 0xbd, 0x0d, 0x57,
        0xdf, 0xf5, 0x24, 0xa9, 0x3e, 0xa8, 0x43, 0xc9,
        0xd7, 0x79, 0xd6, 0xf6, 0x7c, 0x22, 0xb9, 0x03,
        0xe0, 0x0f, 0xec, 0xde, 0x7a, 0x94, 0xb0, 0xbc,
        0xdc, 0xe8, 0x28, 0x50, 0x4e, 0x33, 0x0a, 0x4a,
        0xa7, 0x97, 0x60, 0x73, 0x1e, 0x00, 0x62, 0x44,
        0x1a, 0xb8, 0x38, 0x82, 0x64, 0x9f, 0x26, 0x41,
        0xad, 0x45, 0x46, 0x92, 0x27, 0x5e, 0x55, 0x2f,
        0x8c, 0xa3, 0xa5, 0x7d, 0x69, 0xd5, 0x95, 0x3b,
        0x07, 0x58, 0xb3, 0x40, 0x86, 0xac, 0x1d, 0xf7,
        0x30, 0x37, 0x6b, 0xe4, 0x88, 0xd9, 0xe7, 0x89,
        0xe1, 0x1b, 0x83, 0x49, 0x4c, 0x3f, 0xf8, 0xfe,
        0x8d, 0x53, 0xaa, 0x90, 0xca, 0xd8, 0x85, 0x61,
        0x20, 0x71, 0x67, 0xa4, 0x2d, 0x2b, 0x09, 0x5b,
        0xcb, 0x9b, 0x25, 0xd0, 0xbe, 0xe5, 0x6c, 0x52,
        0x59, 0xa6, 0x74, 0xd2, 0xe6, 0xf4, 0xb4, 0xc0,
        0xd1, 0x66, 0xaf, 0xc2, 0x39, 0x4b, 0x63, 0xb6
    };
        static byte[] InversedSBox = {
        0xa5, 0x2d, 0x32, 0x8f, 0x0e, 0x30, 0x38, 0xc0,
        0x54, 0xe6, 0x9e, 0x39, 0x55, 0x7e, 0x52, 0x91,
        0x64, 0x03, 0x57, 0x5a, 0x1c, 0x60, 0x07, 0x18,
        0x21, 0x72, 0xa8, 0xd1, 0x29, 0xc6, 0xa4, 0x3f,
        0xe0, 0x27, 0x8d, 0x0c, 0x82, 0xea, 0xae, 0xb4,
        0x9a, 0x63, 0x49, 0xe5, 0x42, 0xe4, 0x15, 0xb7,
        0xc8, 0x06, 0x70, 0x9d, 0x41, 0x75, 0x19, 0xc9,
        0xaa, 0xfc, 0x4d, 0xbf, 0x2a, 0x73, 0x84, 0xd5,
        0xc3, 0xaf, 0x2b, 0x86, 0xa7, 0xb1, 0xb2, 0x5b,
        0x46, 0xd3, 0x9f, 0xfd, 0xd4, 0x0f, 0x9c, 0x2f,
        0x9b, 0x43, 0xef, 0xd9, 0x79, 0xb6, 0x53, 0x7f,
        0xc1, 0xf0, 0x23, 0xe7, 0x25, 0x5e, 0xb5, 0x1e,
        0xa2, 0xdf, 0xa6, 0xfe, 0xac, 0x22, 0xf9, 0xe2,
        0x4a, 0xbc, 0x35, 0xca, 0xee, 0x78, 0x05, 0x6b,
        0x51, 0xe1, 0x59, 0xa3, 0xf2, 0x71, 0x56, 0x11,
        0x6a, 0x89, 0x94, 0x65, 0x8c, 0xbb, 0x77, 0x3c,
        0x7b, 0x28, 0xab, 0xd2, 0x31, 0xde, 0xc4, 0x5f,
        0xcc, 0xcf, 0x76, 0x2c, 0xb8, 0xd8, 0x2e, 0x36,
        0xdb, 0x69, 0xb3, 0x14, 0x95, 0xbe, 0x62, 0xa1,
        0x3b, 0x16, 0x66, 0xe9, 0x5c, 0x6c, 0x6d, 0xad,
        0x37, 0x61, 0x4b, 0xb9, 0xe3, 0xba, 0xf1, 0xa0,
        0x85, 0x83, 0xda, 0x47, 0xc5, 0xb0, 0x33, 0xfa,
        0x96, 0x6f, 0x6e, 0xc2, 0xf6, 0x50, 0xff, 0x5d,
        0xa9, 0x8e, 0x17, 0x1b, 0x97, 0x7d, 0xec, 0x58,
        0xf7, 0x1f, 0xfb, 0x7c, 0x09, 0x0d, 0x7a, 0x67,
        0x45, 0x87, 0xdc, 0xe8, 0x4f, 0x1d, 0x4e, 0x04,
        0xeb, 0xf8, 0xf3, 0x3e, 0x3d, 0xbd, 0x8a, 0x88,
        0xdd, 0xcd, 0x0b, 0x13, 0x98, 0x02, 0x93, 0x80,
        0x90, 0xd0, 0x24, 0x34, 0xcb, 0xed, 0xf4, 0xce,
        0x99, 0x10, 0x44, 0x40, 0x92, 0x3a, 0x01, 0x26,
        0x12, 0x1a, 0x48, 0x68, 0xf5, 0x81, 0x8b, 0xc7,
        0xd6, 0x20, 0x0a, 0x08, 0x00, 0x4c, 0xd7, 0x74
    };
        static byte[][] RoundConst =
        {
         new byte[]{110, 162, 118, 114, 108, 72, 122, 184, 93, 39, 189, 16, 221, 132, 148, 1},
         new byte[]{220, 135, 236, 228, 216, 144, 244, 179, 186, 78, 185, 32, 121, 203, 235, 2},
         new byte[]{178, 37, 154, 150, 180, 216, 142, 11, 231, 105, 4, 48, 164, 79, 127, 3},
         new byte[]{123, 205, 27, 11, 115, 227, 43, 165, 183, 156, 177, 64, 242, 85, 21, 4},
         new byte[]{21, 111, 109, 121, 31, 171, 81, 29, 234, 187, 12, 80, 47, 209, 129, 5},
         new byte[]{167, 74, 247, 239, 171, 115, 223, 22, 13, 210, 8, 96, 139, 158, 254, 6},
         new byte[]{201, 232, 129, 157, 199, 59, 165, 174, 80, 245, 181, 112, 86, 26, 106, 7},
         new byte[]{246, 89, 54, 22, 230, 5, 86, 137, 173, 251, 161, 128, 39, 170, 42, 8},
         new byte[]{152, 251, 64, 100, 138, 77, 44, 49, 240, 220, 28, 144, 250, 46, 190, 9},
         new byte[]{42, 222, 218, 242, 62, 149, 162, 58, 23, 181, 24, 160, 94, 97, 193, 10},
         new byte[]{68, 124, 172, 128, 82, 221, 216, 130, 74, 146, 165, 176, 131, 229, 85, 11},
         new byte[]{141, 148, 45, 29, 149, 230, 125, 44, 26, 103, 16, 192, 213, 255, 63, 12},
         new byte[]{227, 54, 91, 111, 249, 174, 7, 148, 71, 64, 173, 208, 8, 123, 171, 13},
         new byte[]{81, 19, 193, 249, 77, 118, 137, 159, 160, 41, 169, 224, 172, 52, 212, 14},
         new byte[]{63, 177, 183, 139, 33, 62, 243, 39, 253, 14, 20, 240, 113, 176, 64, 15},
         new byte[]{47, 178, 108, 44, 15, 10, 172, 209, 153, 53, 129, 195, 78, 151, 84, 16},
         new byte[]{65, 16, 26, 94, 99, 66, 214, 105, 196, 18, 60, 211, 147, 19, 192, 17},
         new byte[]{243, 53, 128, 200, 215, 154, 88, 98, 35, 123, 56, 227, 55, 92, 191, 18},
         new byte[]{157, 151, 246, 186, 187, 210, 34, 218, 126, 92, 133, 243, 234, 216, 43, 19},
         new byte[]{84, 127, 119, 39, 124, 233, 135, 116, 46, 169, 48, 131, 188, 194, 65, 20},
         new byte[]{58, 221, 1, 85, 16, 161, 253, 204, 115, 142, 141, 147, 97, 70, 213, 21},
         new byte[]{136, 248, 155, 195, 164, 121, 115, 199, 148, 231, 137, 163, 197, 9, 170, 22},
         new byte[]{230, 90, 237, 177, 200, 49, 9, 127, 201, 192, 52, 179, 24, 141, 62, 23},
         new byte[]{217, 235, 90, 58, 233, 15, 250, 88, 52, 206, 32, 67, 105, 61, 126, 24},
         new byte[]{183, 73, 44, 72, 133, 71, 128, 224, 105, 233, 157, 83, 180, 185, 234, 25},
         new byte[]{5, 108, 182, 222, 49, 159, 14, 235, 142, 128, 153, 99, 16, 246, 149, 26},
         new byte[]{107, 206, 192, 172, 93, 215, 116, 83, 211, 167, 36, 115, 205, 114, 1, 27},
         new byte[]{162, 38, 65, 49, 154, 236, 209, 253, 131, 82, 145, 3, 155, 104, 107, 28},
         new byte[]{204, 132, 55, 67, 246, 164, 171, 69, 222, 117, 44, 19, 70, 236, 255, 29},
         new byte[]{126, 161, 173, 213, 66, 124, 37, 78, 57, 28, 40, 35, 226, 163, 128, 30},
         new byte[]{16, 3, 219, 167, 46, 52, 95, 246, 100, 59, 149, 51, 63, 39, 20, 31},
         new byte[]{94, 167, 216, 88, 30, 20, 155, 97, 241, 106, 193, 69, 156, 237, 168, 32 }
        };
        static byte[] add_tail(byte[] text)
        {
            int temp = text.Length % 16;
            int new_size = text.Length + 16 - temp;
            byte[] new_text = new byte[new_size];
            Array.Copy(text, new_text, text.Length);
            new_text[text.Length] = 1;
            return new_text;
        }
        static byte[] cut_tail(byte[] text)
        {
            int i = Array.LastIndexOf(text, (byte)1);
            byte[] newText = new byte[i];
            Array.Copy(text, newText, i);
            return newText;
        }
        static byte MultGalois(byte a, byte b)
        {
            byte MultRes = 0;
            //Ð°=  10100110
            //b=         1
            while (b != 0)
            {
                if ((b & 0x1) == 0x1)
                    MultRes = (byte)(MultRes ^ a);
                a = (byte)((a << 1));
                b = (byte)(b >> 1);
            }
            MultRes = (byte)(MultRes ^ 0xE3);
            return MultRes;
        }

        static byte FuncL(byte[] data)
        {
            byte la = 0;

            for (int i = 0; i < blockSize; i++)
            {
                la = (byte)(la ^ MultGalois(data[i], CoefficientsL[i]));
            }
            return la;
        }

        static byte InversedFuncL(byte[] data)
        {
            byte la = 0;

            for (int i = blockSize - 2; i >= 0; i--)
            {
                la = (byte)(la ^ MultGalois(data[i], CoefficientsL[i + 1]));
            }
            la = (byte)(la ^ MultGalois(data[blockSize - 1], CoefficientsL[0]));
            return la;
        }
        
        static byte[] TransformationL(byte[] data)
        {
            byte la;
            byte[] L = data;

            for (int i = 0; i < 16; i++)
            {
                la = FuncL(L);
                for (int j = 0; j < blockSize - 1; j++)
                {
                    L[j] = L[j + 1];
                }
                L[blockSize - 1] = la;
            }

            return L;
        }

        static byte[] InversedTransformationL(byte[] data)
        {
            byte la = 0;
            byte[] LR = data;

            for (int i = 0; i < blockSize; i++)
            {
                la = InversedFuncL(LR);
                for (int j = blockSize - 1; j > 0; j--)
                {
                    LR[j] = LR[j - 1];
                }
                LR[0] = la;
            }

            return LR;
        }

        static byte[] TransformationS(byte[] data)
        {
            byte[] S = new byte[blockSize];

            for (int i = 0; i < blockSize; i++)
            {
                S[i] = SBox[data[i]];
            }
            return S;
        }
        static byte[] InversedTransformationS(byte[] data)
        {
            byte[] S = new byte[blockSize];

            for (int i = 0; i < blockSize; i++)
            {
                S[i] = InversedSBox[data[i]];
            }
            return S;
        }

        static byte[] TransformationX(byte[] data, byte[] key)
        {
            byte[] X = new byte[blockSize];

            for (int i = 0; i < blockSize; i++)
            {
                X[i] = (byte)(data[i] ^ key[i]);
            }

            return X;
        }
        static byte[][] GeneratingRoundKeys(byte[] key)
        {
            byte[][] roundKeys;
            roundKeys = new byte[10][];
            for (int i = 0; i < roundKeys.Length; i++)
                roundKeys[i] = new byte[blockSize];
            for (int i = 0; i < blockSize; i++)
            {
                roundKeys[0][i] = key[i];
                roundKeys[1][i] = key[i + blockSize];
            }
            byte[] k2 = roundKeys[0];
            byte[] k1 = roundKeys[1];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    byte[] temp = k1;
                    k1 = TransformationX(k1, RoundConst[8 * i + j]);
                    k1 = TransformationS(k1);
                    k1 = TransformationL(k1);
                    k2 = TransformationX(k2, k1);
                    k1 = k2;
                    k2 = temp;
                }
                roundKeys[i * 2 + 2] = k1;
                roundKeys[i * 2 + 3] = k2;
            }

            return roundKeys;
        }

        static byte[] encrypt(byte[] text, byte[] key)
        {

            byte[][] RoundKeys = GeneratingRoundKeys(key);
            text = add_tail(text);

            byte[] result = new byte[text.Length];
            for (int j = 0; j < text.Length; j += 16)
            {
                byte[] temptext = new byte[16];
                Array.Copy(text, j, temptext, 0, 16);

                for (int i = 0; i < 9; i++)
                {
                    temptext = TransformationX(temptext, RoundKeys[i]);
                    temptext = TransformationS(temptext);
                    temptext = TransformationL(temptext);
                }

                temptext = TransformationX(temptext, RoundKeys[9]);
                Array.Copy(temptext, 0, result, j, 16);
            }
            return result;

        }

        static byte[] decrypt(byte[] text, byte[] key)
        {

            byte[][] RoundKeys = GeneratingRoundKeys(key);

            byte[] result = new byte[text.Length];
            for (int j = 0; j < text.Length; j += 16)
            {
                byte[] temptext = new byte[16];
                Array.Copy(text, j, temptext, 0, 16);
                for (int i = 9; i > 0; i--)
                {
                    temptext = TransformationX(temptext, RoundKeys[i]);
                    temptext = InversedTransformationL(temptext);
                    temptext = InversedTransformationS(temptext);
                }
                temptext = TransformationX(temptext, RoundKeys[0]);
                Array.Copy(temptext, 0, result, j, 16);
            }
            result = cut_tail(result);

            return result;
        }

        static void Main(string[] args)
        {
            // Console.WriteLine(MultGalois(237, 3));
            Console.WriteLine("ÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐµÐºÑÑ");
            string s = Console.ReadLine();
            byte[] text = Encoding.UTF8.GetBytes(s);
            byte[] key = Encoding.UTF8.GetBytes("0123456789ABCDEF0123456789ABCDEF");
            Console.WriteLine("\nÐ¢ÐµÐºÑÑ: " + Encoding.UTF8.GetString(text));

            Console.WriteLine();
            Console.WriteLine("ÐÐ»ÑÑ: " + Encoding.UTF8.GetString(key));

            Console.WriteLine();
            byte[] EncryptedData = encrypt(text, key);
            Console.WriteLine("ÐÐ°ÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹ ÑÐµÐºÑÑ: " + Encoding.UTF8.GetString(EncryptedData));

            Console.WriteLine();
            byte[] DecryptedData = decrypt(EncryptedData, key);
            Console.WriteLine("Ð Ð°ÑÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹ ÑÐµÐºÑÑ: " + Encoding.UTF8.GetString(DecryptedData));
            Console.WriteLine();

            Console.ReadKey();
        }
    }
}
